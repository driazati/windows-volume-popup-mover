using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.IO;

namespace OSDMover
{


    public class OSDMoverTrayApp : ApplicationContext
    {
        #region dllimports
        [StructLayout(LayoutKind.Sequential)]
        private struct POINT
        {
            public int x;
            public int y;
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct MSLLHOOKSTRUCT
        {
            public POINT pt;
            public uint mouseData;
            public uint flags;
            public uint time;
            public IntPtr dwExtraInfo;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct RECT
        {
            public int Left;        // x position of upper-left corner
            public int Top;         // y position of upper-left corner
            public int Right;       // x position of lower-right corner
            public int Bottom;      // y position of lower-right corner
        }

        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        static extern int CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        public delegate int MouseProc(int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("user32", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
        public static extern int SetWindowsHookEx(int idHook, MouseProc lpfn, int hInstance, int threadId);

        [DllImport("user32", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
        public static extern int CallNextHookEx(int idHook, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
        public static extern int GetModuleHandle(string lpModuleName);

        [DllImport("user32.dll", SetLastError = true)]
        static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

        [DllImport("user32.dll", SetLastError = true)]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        #endregion

        // TODO: How to include appicon.ico in the .exe??
        private byte[] icon = { 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x20, 0x20, 0x0, 0x0, 0x1, 0x0, 0x20, 0x0, 0xda, 0x2, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x89, 0x50, 0x4e, 0x47, 0xd, 0xa, 0x1a, 0xa, 0x0, 0x0, 0x0, 0xd, 0x49, 0x48, 0x44, 0x52, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x20, 0x8, 0x3, 0x0, 0x0, 0x0, 0x44, 0xa4, 0x8a, 0xc6, 0x0, 0x0, 0x0, 0x1, 0x73, 0x52, 0x47, 0x42, 0x1, 0xd9, 0xc9, 0x2c, 0x7f, 0x0, 0x0, 0x0, 0x9, 0x70, 0x48, 0x59, 0x73, 0x0, 0x0, 0xb, 0x13, 0x0, 0x0, 0xb, 0x13, 0x1, 0x0, 0x9a, 0x9c, 0x18, 0x0, 0x0, 0x1, 0x1d, 0x50, 0x4c, 0x54, 0x45, 0x0, 0x0, 0x0, 0x4a, 0x4a, 0x4a, 0x52, 0x52, 0x52, 0x7c, 0x7c, 0x7c, 0x55, 0x55, 0x55, 0x4c, 0x4c, 0x4c, 0x5f, 0x5f, 0x5f, 0x67, 0x67, 0x67, 0x4f, 0x4f, 0x4f, 0x88, 0x88, 0x88, 0xd2, 0xd2, 0xd2, 0xdf, 0xdf, 0xdf, 0x9d, 0x9d, 0x9d, 0x6a, 0x6a, 0x6a, 0xc6, 0xc6, 0xc6, 0x8b, 0x8b, 0x8b, 0xa3, 0xa3, 0xa3, 0xc1, 0xc1, 0xc1, 0x85, 0x85, 0x85, 0x5c, 0x5c, 0x5c, 0xaf, 0xaf, 0xaf, 0x61, 0x61, 0x61, 0xa4, 0xa4, 0xa4, 0x6b, 0x6b, 0x6b, 0x75, 0x75, 0x75, 0x94, 0x94, 0x94, 0x86, 0x86, 0x86, 0xd7, 0xd7, 0xd7, 0xdc, 0xdc, 0xdc, 0xc8, 0xc8, 0xc8, 0xd5, 0xd5, 0xd5, 0xde, 0xde, 0xde, 0xd9, 0xd9, 0xd9, 0xdd, 0xdd, 0xdd, 0xa8, 0xa8, 0xa8, 0xde, 0xde, 0xde, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xbf, 0xbf, 0xbf, 0xde, 0xde, 0xde, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xdd, 0xdd, 0xdd, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xdc, 0xdc, 0xdc, 0xdd, 0xdd, 0xdd, 0xde, 0xde, 0xde, 0xdd, 0xdd, 0xdd, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xdd, 0xdd, 0xdd, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xdc, 0xdc, 0xdc, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xdc, 0xdc, 0xdc, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xdd, 0xdd, 0xdd, 0xdf, 0xdf, 0xdf, 0xde, 0xde, 0xde, 0xdd, 0xdd, 0xdd, 0x35, 0xcc, 0xa0, 0xaf, 0x0, 0x0, 0x0, 0x5f, 0x74, 0x52, 0x4e, 0x53, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd3, 0xdd, 0x47, 0xbd, 0xfd, 0xf7, 0x82, 0x8, 0xa0, 0xf4, 0xfc, 0xc8, 0xf, 0x64, 0xf9, 0xfe, 0xba, 0x16, 0x1e, 0x6d, 0x90, 0xa5, 0xb0, 0xaf, 0xae, 0x9c, 0x8d, 0x8c, 0x80, 0xa1, 0xe8, 0x73, 0xfa, 0xfb, 0xfb, 0x81, 0x45, 0xc9, 0xa7, 0x95, 0x91, 0x92, 0x94, 0xa8, 0xaa, 0xa9, 0xb3, 0xc7, 0xee, 0x54, 0x51, 0xf5, 0x55, 0x3a, 0xe7, 0xd1, 0x26, 0x96, 0x6c, 0x62, 0x76, 0x41, 0xb0, 0xbb, 0x0, 0x0, 0x0, 0xeb, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63, 0x60, 0xa0, 0x2, 0x60, 0xc4, 0x3, 0xa0, 0xa, 0x98, 0x98, 0x99, 0x59, 0x80, 0x3c, 0x56, 0x36, 0x76, 0xe, 0x46, 0x24, 0x1a, 0xa1, 0x80, 0x93, 0x8b, 0x9b, 0x7, 0xc8, 0xe3, 0xe5, 0xe3, 0xe6, 0x67, 0x44, 0xa2, 0x11, 0xa, 0x4, 0xb8, 0xb9, 0x5, 0x81, 0x3c, 0x21, 0x8, 0x5, 0xa7, 0x11, 0xa, 0x84, 0x45, 0x44, 0x44, 0xf1, 0x9a, 0x0, 0x5, 0xb8, 0xdd, 0x40, 0xd0, 0x17, 0x30, 0x20, 0x26, 0x8e, 0x53, 0x81, 0x84, 0xa4, 0x28, 0xa3, 0x94, 0xb4, 0x8c, 0x8c, 0x2c, 0xe, 0x5, 0x72, 0xf2, 0xdc, 0xdc, 0xdc, 0xf2, 0xf2, 0xa, 0xa, 0x8a, 0x4a, 0x78, 0xad, 0x20, 0xe8, 0x6, 0x1c, 0xa, 0x6, 0x2, 0x28, 0xab, 0xa8, 0xe2, 0x57, 0xa0, 0xa6, 0xae, 0xa1, 0x89, 0x57, 0x81, 0x96, 0xb6, 0x8e, 0xae, 0x9e, 0x3e, 0x5e, 0x15, 0x6, 0x86, 0x46, 0xc6, 0x26, 0xc8, 0x22, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x40, 0x60, 0x5, 0x44, 0xd6, 0x36, 0xb6, 0x76, 0xf6, 0xe, 0x86, 0x46, 0x8e, 0x48, 0x66, 0x38, 0x69, 0xa8, 0x3b, 0x3b, 0xeb, 0xba, 0x80, 0xa0, 0xb3, 0x8b, 0x8b, 0xb3, 0xb3, 0xa1, 0xb3, 0xb3, 0xab, 0xbc, 0xbc, 0x1b, 0x42, 0x81, 0xbb, 0x87, 0xb2, 0xa7, 0x97, 0xb9, 0xb9, 0xb7, 0xb9, 0xb7, 0xb7, 0x8f, 0xb9, 0xaf, 0x9f, 0x7f, 0x40, 0x60, 0x50, 0xb0, 0x91, 0x7a, 0x8, 0x3e, 0x57, 0x84, 0x86, 0xe9, 0x86, 0xe3, 0x93, 0x8f, 0x88, 0xd4, 0xd5, 0xc6, 0xe7, 0x9, 0x6f, 0x5d, 0xf5, 0x28, 0x7c, 0xde, 0x8c, 0xe, 0x56, 0x8f, 0xc1, 0x1b, 0xc, 0xfa, 0xb1, 0x71, 0xf8, 0xa4, 0xa9, 0xe, 0x0, 0x24, 0x57, 0x1e, 0xe6, 0x57, 0xf9, 0xbb, 0x21, 0x0, 0x0, 0x0, 0x0, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82 };

        private NotifyIcon trayIcon;
        private ContextMenu contextMenu;
        private MenuItem menuItem;
        private IContainer components;

        private int hookID = 0;
        private MouseProc hookCallback = null;
        public OSDMoverTrayApp()
        {
            this.InitMouseHandler();
            this.InitSystemTrayIcon();
        }

        void InitMouseHandler()
        {
            // Hook into the mouse move event and call HookCallback()
            this.hookCallback = new MouseProc(HookCallback);

            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                const int MOUSEMOVE = 14;
                this.hookID = SetWindowsHookEx(MOUSEMOVE, this.hookCallback, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        void InitSystemTrayIcon()
        {
            // Set up the system tray icon
            this.components = new System.ComponentModel.Container();
            this.contextMenu = new System.Windows.Forms.ContextMenu();
            this.menuItem = new System.Windows.Forms.MenuItem();

            this.contextMenu.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] { this.menuItem });

            this.menuItem.Index = 0;
            this.menuItem.Text = "Exit";
            this.menuItem.Click += new System.EventHandler(this.Exit);

            this.trayIcon = new System.Windows.Forms.NotifyIcon(this.components);
            trayIcon.Icon = new Icon(new MemoryStream(icon));
            trayIcon.ContextMenu = this.contextMenu;
            trayIcon.Text = "OSD (Volume Controls) Mover";
            trayIcon.Visible = true;
        }

        void Exit(object sender, EventArgs e)
        {
            // System tray "Exit" option handler
            trayIcon.Visible = false;
            Application.Exit();
            Environment.Exit(0);
        }

        private int HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            var hookStruct = (MSLLHOOKSTRUCT)Marshal.PtrToStructure(lParam, typeof(MSLLHOOKSTRUCT));

            // The OSD volume control dialog is inside this container. To move it, you need to move
            // the NativeHWNDHost window, but DirectUIHWND has the correct dimensions, so get both.
            IntPtr container = IntPtr.Zero;
            container = FindWindowEx(IntPtr.Zero, container, "NativeHWNDHost", "");
            IntPtr osd = FindWindowEx(container, IntPtr.Zero, "DirectUIHWND", "");
            RECT osdPosition;
            GetWindowRect(osd, out osdPosition);
            
            // Check if the mouse is in or near the popup
            const int padding = 10;
            int x = hookStruct.pt.x;
            int y = hookStruct.pt.y;
            bool xIn = x >= osdPosition.Left - padding && x <= osdPosition.Right + padding;
            bool yIn = y >= osdPosition.Top - padding && y <= osdPosition.Bottom + padding;

            if (xIn && yIn)
            {
                // The mouse is in the popup, so move it to the right side of the screen
                var newX = Screen.PrimaryScreen.Bounds.Width - osdPosition.Right;
                var newY = osdPosition.Top;
                var newWidth = osdPosition.Right - osdPosition.Left;
                var newHeight = osdPosition.Bottom - osdPosition.Top;
                Console.WriteLine($"Moving to {newX} {newY} {newWidth} {newHeight}");
                MoveWindow(container, newX, newY, newWidth, newHeight, true);
            }

            return CallNextHookEx(this.hookID, nCode, wParam, lParam);
        }
    }
}
